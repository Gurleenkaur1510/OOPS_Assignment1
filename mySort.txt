Custom Sort Algorithm: Heap Sort

Steps:
------
1. Build a max heap from the array.
2. Swap the root with the last element.
3. Reduce the heap size by 1.
4. Heapify the new root.
5. Repeat until the array is sorted.

Pseudocode:
-----------
function heapSort(arr):
    buildMaxHeap(arr)
    for i from n-1 downto 1:
        swap(arr[0], arr[i])
        heapify(arr, 0, i)

function heapify(arr, i, n):
    largest = i
    left = 2 * i + 1
    right = 2 * i + 2
    if left < n and arr[left] > arr[largest]:
        largest = left
    if right < n and arr[right] > arr[largest]:
        largest = right
    if largest != i:
        swap(arr[i], arr[largest])
        heapify(arr, largest, n)

Time Complexity:
----------------
Best:    O(n log n)
Average: O(n log n)
Worst:   O(n log n)

Why Heap Sort?
--------------
- Consistent O(n log n)
- In-place
- Efficient for large datasets
